#include "ql/instruments/bond.hpp"
#include "ql/time/schedule.hpp"


class FixedRateBondCustom : public Bond {
public:
    //! simple annual compounding coupon rates
    FixedRateBondCustom(Natural settlementDays,
                        Real faceAmount,
                        Schedule schedule,
                        const std::vector<Rate>& coupons,
                        const DayCounter& accrualDayCounter,
                        BusinessDayConvention paymentConvention = Following,
                        Integer paymentLag = 0,
                        Real redemption = 100.0,
                        const Date& issueDate = Date(),
                        const Calendar& paymentCalendar = Calendar(),
                        const Period& exCouponPeriod = Period(),
                        const Calendar& exCouponCalendar = Calendar(),
                        BusinessDayConvention exCouponConvention = Unadjusted,
                        bool exCouponEndOfMonth = false,
                        const DayCounter& firstPeriodDayCounter = DayCounter());

    Frequency frequency() const { return frequency_; }
    const DayCounter& dayCounter() const { return dayCounter_; }
    const DayCounter& firstPeriodDayCounter() const { return firstPeriodDayCounter_; }
protected:
    Frequency frequency_;
    DayCounter dayCounter_;
    DayCounter firstPeriodDayCounter_;
};



double pricingFRB(
        // ===================================================================================================
        const int evaluationDate                // INPUT 1. 평가일 (serial number)
        , const int issueDate                   // INPUT 2. 발행일 (serial number)
        , const int maturityDate                // INPUT 3. 만기일 (serial number)
        , const double notional                 // INPUT 4. 채권 원금
        , const double couponRate               // INPUT 5. 쿠폰 이율
        , const int couponDayCounter            // INPUT 6. DayCounter code (TODO)
        , const int couponCalendar              // INPUT 7. (추가)Calendar code (TODO)
        , const int couponFrequency             // INPUT 8. (추가)Frequency code (TODO)
        , const int scheduleGenRule             // INPUT 9. 스케쥴 생성 기준(Forward/Backward)
        , const int paymentBDC                  // INPUT 10. 지급일 휴일 적용 기준
        , const int paymentLag                  // INPUT 11. 지급일 지연 일 수

        , const int numberOfCoupons             // INPUT 12. 쿠폰 개수
        , const int* paymentDates               // INPUT 13. 지급일 배열
        , const int* realStartDates             // INPUT 14. 각 구간 시작일
        , const int* realEndDates               // INPUT 15. 각 구간 종료일

        , const int numberOfGirrTenors          // INPUT 16. GIRR 만기 수
        , const int* girrTenorDays              // INPUT 17. GIRR 만기 (startDate로부터의 일수)
        , const double* girrRates               // INPUT 18. GIRR 금리
        , const int* girrConvention             // INPUT 19. GIRR DayCountern, 보간법, 이자 계산 방식, 이자 빈도 (TODO)

        , const double spreadOverYield          // INPUT 20. 채권의 종목 Credit Spread

        , const int numberOfCsrTenors           // INPUT 21. CSR 만기 수
        , const int* csrTenorDays               // INPUT 22. CSR 만기 (startDate로부터의 일수)
        , const double* csrRates                // INPUT 23. CSR 스프레드 (금리 차이)

        , const double marketPrice              // INPUT 24. (추가)시장가격(Spread Over Yield 산출 시 사용)
        , const double csrRiskWeight            // INPUT 25. (추가)csr 리스크요소 버킷의 위험 가중치(Curvature 산출 시 사용)

        , const int calType			            // INPUT 26. 계산 타입 (1: Price, 2. BASEL 2 민감도, 3. BASEL 3 민감도, 9: SOY)
        , const int logYn                       // INPUT 27. 로그 파일 생성 여부 (0: No, 1: Yes)

        // OUTPUT 1. Net PV (리턴값)
        , double* resultBasel2                  // OUTPUT 2. (추가)Basel 2 Result(Delta, Gamma, Duration, Convexity, PV01)
        , double* resultGirrDelta               // OUTPUT 3. GIRR Delta [index 0: size, index 1 ~ size + 1: tenor, index size + 2 ~ 2 * size + 1: sensitivity]
        , double* resultCsrDelta			    // OUTPUT 4. CSR Delta [index 0: size, index 1 ~ size + 1: tenor, index size + 2 ~ 2 * size + 1: sensitivity]
        , double* resultGirrCvr			        // OUTPUT 5. (추가)GIRR Curvature [BumpUp Curvature, BumpDownCurvature]
        , double* resultCsrCvr			        // OUTPUT 6. (추가)CSR Curvature [BumpUp Curvature, BumpDownCurvature]
        // ===================================================================================================

);

